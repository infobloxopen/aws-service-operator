// >>>>>>> DO NOT EDIT THIS FILE <<<<<<<<<<
// This file is autogenerated via `aws-operator-codegen process`
// If you'd like the change anything about this file make edits to the .templ
// file in the pkg/codegen/assets directory.

package vpc

import (
	"errors"
	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/service/cloudformation"
	awsV1alpha1 "github.com/awslabs/aws-service-operator/pkg/apis/service-operator.aws/v1alpha1"
	"github.com/awslabs/aws-service-operator/pkg/config"
	"github.com/awslabs/aws-service-operator/pkg/helpers"
)

// New generates a new object
func New(config config.Config, vpc *awsV1alpha1.Vpc, topicARN string) *Cloudformation {
	return &Cloudformation{
		Vpc:      vpc,
		config:   config,
		topicARN: topicARN,
	}
}

// Cloudformation defines the vpc cfts
type Cloudformation struct {
	config   config.Config
	Vpc      *awsV1alpha1.Vpc
	topicARN string
}

// StackName returns the name of the stack based on the aws-operator-config
func (s *Cloudformation) StackName() string {
	return helpers.StackName(s.config.ClusterName, "vpc", s.Vpc.Name, s.Vpc.Namespace)
}

// GetOutputs return the stack outputs from the DescribeStacks call
func (s *Cloudformation) GetOutputs() (map[string]string, error) {
	outputs := map[string]string{}
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName: aws.String(s.StackName()),
	}

	output, err := svc.DescribeStacks(&stackInputs)
	if err != nil {
		return nil, err
	}
	// Not sure if this is even possible
	if len(output.Stacks) != 1 {
		return nil, errors.New("no stacks returned with that stack name")
	}

	for _, out := range output.Stacks[0].Outputs {
		outputs[*out.OutputKey] = *out.OutputValue
	}

	return outputs, err
}

// CreateStack will create the stack with the supplied params
func (s *Cloudformation) CreateStack() (output *cloudformation.CreateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "vpc", s.Vpc.Spec.CloudFormationTemplateName, s.Vpc.Spec.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.CreateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.Vpc.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.Vpc.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.Vpc.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
	vpcNameTemp := "{{.Obj.Spec.VpcName}}"
	vpcNameValue, err := helpers.Templatize(vpcNameTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	vpcName := helpers.CreateParam("VpcName", helpers.Stringify(vpcNameValue))
	vpcCIDRTemp := "{{.Obj.Spec.VpcCIDR}}"
	vpcCIDRValue, err := helpers.Templatize(vpcCIDRTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	vpcCIDR := helpers.CreateParam("VpcCIDR", helpers.Stringify(vpcCIDRValue))
	publicSubnet1CIDRTemp := "{{.Obj.Spec.PublicSubnet1CIDR}}"
	publicSubnet1CIDRValue, err := helpers.Templatize(publicSubnet1CIDRTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	publicSubnet1CIDR := helpers.CreateParam("PublicSubnet1CIDR", helpers.Stringify(publicSubnet1CIDRValue))
	publicSubnet2CIDRTemp := "{{.Obj.Spec.PublicSubnet2CIDR}}"
	publicSubnet2CIDRValue, err := helpers.Templatize(publicSubnet2CIDRTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	publicSubnet2CIDR := helpers.CreateParam("PublicSubnet2CIDR", helpers.Stringify(publicSubnet2CIDRValue))
	privateSubnet1CIDRTemp := "{{.Obj.Spec.PrivateSubnet1CIDR}}"
	privateSubnet1CIDRValue, err := helpers.Templatize(privateSubnet1CIDRTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	privateSubnet1CIDR := helpers.CreateParam("PrivateSubnet1CIDR", helpers.Stringify(privateSubnet1CIDRValue))
	privateSubnet2CIDRTemp := "{{.Obj.Spec.PrivateSubnet2CIDR}}"
	privateSubnet2CIDRValue, err := helpers.Templatize(privateSubnet2CIDRTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	privateSubnet2CIDR := helpers.CreateParam("PrivateSubnet2CIDR", helpers.Stringify(privateSubnet2CIDRValue))
	envTemp := "{{.Obj.Spec.Env}}"
	envValue, err := helpers.Templatize(envTemp, helpers.Data{Obj: s.Vpc, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	env := helpers.CreateParam("Env", helpers.Stringify(envValue))

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
	parameters = append(parameters, vpcName)
	parameters = append(parameters, vpcCIDR)
	parameters = append(parameters, publicSubnet1CIDR)
	parameters = append(parameters, publicSubnet2CIDR)
	parameters = append(parameters, privateSubnet1CIDR)
	parameters = append(parameters, privateSubnet2CIDR)
	parameters = append(parameters, env)

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.Vpc.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.Vpc.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.Vpc.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

	output, err = svc.CreateStack(&stackInputs)
	return
}

// UpdateStack will update the existing stack
func (s *Cloudformation) UpdateStack(updated *awsV1alpha1.Vpc) (output *cloudformation.UpdateStackOutput, err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	cftemplate := helpers.GetCloudFormationTemplate(s.config, "vpc", updated.Spec.CloudFormationTemplateName, updated.Spec.CloudFormationTemplateNamespace)

	stackInputs := cloudformation.UpdateStackInput{
		StackName:   aws.String(s.StackName()),
		TemplateURL: aws.String(cftemplate),
		NotificationARNs: []*string{
			aws.String(s.topicARN),
		},
	}

	resourceName := helpers.CreateParam("ResourceName", s.Vpc.Name)
	resourceVersion := helpers.CreateParam("ResourceVersion", s.Vpc.ResourceVersion)
	namespace := helpers.CreateParam("Namespace", s.Vpc.Namespace)
	clusterName := helpers.CreateParam("ClusterName", s.config.ClusterName)
	vpcNameTemp := "{{.Obj.Spec.VpcName}}"
	vpcNameValue, err := helpers.Templatize(vpcNameTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	vpcName := helpers.CreateParam("VpcName", helpers.Stringify(vpcNameValue))
	vpcCIDRTemp := "{{.Obj.Spec.VpcCIDR}}"
	vpcCIDRValue, err := helpers.Templatize(vpcCIDRTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	vpcCIDR := helpers.CreateParam("VpcCIDR", helpers.Stringify(vpcCIDRValue))
	publicSubnet1CIDRTemp := "{{.Obj.Spec.PublicSubnet1CIDR}}"
	publicSubnet1CIDRValue, err := helpers.Templatize(publicSubnet1CIDRTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	publicSubnet1CIDR := helpers.CreateParam("PublicSubnet1CIDR", helpers.Stringify(publicSubnet1CIDRValue))
	publicSubnet2CIDRTemp := "{{.Obj.Spec.PublicSubnet2CIDR}}"
	publicSubnet2CIDRValue, err := helpers.Templatize(publicSubnet2CIDRTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	publicSubnet2CIDR := helpers.CreateParam("PublicSubnet2CIDR", helpers.Stringify(publicSubnet2CIDRValue))
	privateSubnet1CIDRTemp := "{{.Obj.Spec.PrivateSubnet1CIDR}}"
	privateSubnet1CIDRValue, err := helpers.Templatize(privateSubnet1CIDRTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	privateSubnet1CIDR := helpers.CreateParam("PrivateSubnet1CIDR", helpers.Stringify(privateSubnet1CIDRValue))
	privateSubnet2CIDRTemp := "{{.Obj.Spec.PrivateSubnet2CIDR}}"
	privateSubnet2CIDRValue, err := helpers.Templatize(privateSubnet2CIDRTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	privateSubnet2CIDR := helpers.CreateParam("PrivateSubnet2CIDR", helpers.Stringify(privateSubnet2CIDRValue))
	envTemp := "{{.Obj.Spec.Env}}"
	envValue, err := helpers.Templatize(envTemp, helpers.Data{Obj: updated, Config: s.config, Helpers: helpers.New()})
	if err != nil {
		return output, err
	}
	env := helpers.CreateParam("Env", helpers.Stringify(envValue))

	parameters := []*cloudformation.Parameter{}
	parameters = append(parameters, resourceName)
	parameters = append(parameters, resourceVersion)
	parameters = append(parameters, namespace)
	parameters = append(parameters, clusterName)
	parameters = append(parameters, vpcName)
	parameters = append(parameters, vpcCIDR)
	parameters = append(parameters, publicSubnet1CIDR)
	parameters = append(parameters, publicSubnet2CIDR)
	parameters = append(parameters, privateSubnet1CIDR)
	parameters = append(parameters, privateSubnet2CIDR)
	parameters = append(parameters, env)

	stackInputs.SetParameters(parameters)

	resourceNameTag := helpers.CreateTag("ResourceName", s.Vpc.Name)
	resourceVersionTag := helpers.CreateTag("ResourceVersion", s.Vpc.ResourceVersion)
	namespaceTag := helpers.CreateTag("Namespace", s.Vpc.Namespace)
	clusterNameTag := helpers.CreateTag("ClusterName", s.config.ClusterName)

	tags := []*cloudformation.Tag{}
	tags = append(tags, resourceNameTag)
	tags = append(tags, resourceVersionTag)
	tags = append(tags, namespaceTag)
	tags = append(tags, clusterNameTag)

	stackInputs.SetTags(tags)

	output, err = svc.UpdateStack(&stackInputs)
	return
}

// DeleteStack will delete the stack
func (s *Cloudformation) DeleteStack() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DeleteStackInput{}
	stackInputs.SetStackName(s.StackName())

	_, err = svc.DeleteStack(&stackInputs)
	return
}

// WaitUntilStackDeleted will delete the stack
func (s *Cloudformation) WaitUntilStackDeleted() (err error) {
	sess := s.config.AWSSession
	svc := cloudformation.New(sess)

	stackInputs := cloudformation.DescribeStacksInput{
		StackName: aws.String(s.StackName()),
	}

	err = svc.WaitUntilStackDeleteComplete(&stackInputs)
	return
}
